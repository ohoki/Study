/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-06-22 04:53:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.campingPlace;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class campingRecommend_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>키워드로 장소검색하고 목록으로 표출하기</title>\r\n");
      out.write("<style>\r\n");
      out.write(".title  {\r\n");
      out.write("	font-weight: 500;\r\n");
      out.write("	line-height: 1.2;\r\n");
      out.write("	font-size: 1.3em;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-family: sans-serif;\r\n");
      out.write("	color: #5a656e;\r\n");
      out.write("	margin: 20px auto 0;\r\n");
      out.write("	border-bottom: 1px solid #5a656e;\r\n");
      out.write("	width: 80%;\r\n");
      out.write("	padding-bottom: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".map_wrap, .map_wrap * {\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	font-family: 'Malgun Gothic', dotum, '돋움', sans-serif;\r\n");
      out.write("	font-size: 12px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".map_wrap a, .map_wrap a:hover, .map_wrap a:active {\r\n");
      out.write("	color: #000;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".map_wrap {\r\n");
      out.write("	position: relative;\r\n");
      out.write("	width: 80%;\r\n");
      out.write("	height: 700px;\r\n");
      out.write("	margin: 20px auto 50px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu_wrap {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 0;\r\n");
      out.write("	left: 0;\r\n");
      out.write("	bottom: 0;\r\n");
      out.write("	width: 250px;\r\n");
      out.write("	margin: 10px 0 30px 10px;\r\n");
      out.write("	padding: 5px;\r\n");
      out.write("	overflow-y: auto;\r\n");
      out.write("	background: rgba(255, 255, 255, 0.7);\r\n");
      out.write("	z-index: 1;\r\n");
      out.write("	font-size: 12px;\r\n");
      out.write("	border-radius: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".bg_white {\r\n");
      out.write("	background: #fff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu_wrap hr {\r\n");
      out.write("	display: block;\r\n");
      out.write("	height: 1px;\r\n");
      out.write("	border: 0;\r\n");
      out.write("	border-top: 2px solid #5F5F5F;\r\n");
      out.write("	margin: 3px 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu_wrap .option {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu_wrap .option p {\r\n");
      out.write("	margin: 10px 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu_wrap .option button {\r\n");
      out.write("	margin-left: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList li {\r\n");
      out.write("	list-style: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item {\r\n");
      out.write("	position: relative;\r\n");
      out.write("	border-bottom: 1px solid #888;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	min-height: 65px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item span {\r\n");
      out.write("	display: block;\r\n");
      out.write("	margin-top: 4px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item h5, #placesList .item .info {\r\n");
      out.write("	text-overflow: ellipsis;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	white-space: nowrap;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .info {\r\n");
      out.write("	padding: 10px 0 10px 55px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .info .gray {\r\n");
      out.write("	color: #8a8a8a;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .info .jibun {\r\n");
      out.write("	padding-left: 26px;\r\n");
      out.write("	background:\r\n");
      out.write("		url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png)\r\n");
      out.write("		no-repeat;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .info .tel {\r\n");
      out.write("	color: #009900;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .markerbg {\r\n");
      out.write("	float: left;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	width: 36px;\r\n");
      out.write("	height: 37px;\r\n");
      out.write("	margin: 10px 0 0 10px;\r\n");
      out.write("	background:\r\n");
      out.write("		url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png)\r\n");
      out.write("		no-repeat;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_1 {\r\n");
      out.write("	background-position: 0 -10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_2 {\r\n");
      out.write("	background-position: 0 -56px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_3 {\r\n");
      out.write("	background-position: 0 -102px\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_4 {\r\n");
      out.write("	background-position: 0 -148px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_5 {\r\n");
      out.write("	background-position: 0 -194px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_6 {\r\n");
      out.write("	background-position: 0 -240px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_7 {\r\n");
      out.write("	background-position: 0 -286px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_8 {\r\n");
      out.write("	background-position: 0 -332px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_9 {\r\n");
      out.write("	background-position: 0 -378px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_10 {\r\n");
      out.write("	background-position: 0 -423px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_11 {\r\n");
      out.write("	background-position: 0 -470px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_12 {\r\n");
      out.write("	background-position: 0 -516px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_13 {\r\n");
      out.write("	background-position: 0 -562px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_14 {\r\n");
      out.write("	background-position: 0 -608px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#placesList .item .marker_15 {\r\n");
      out.write("	background-position: 0 -654px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#pagination {\r\n");
      out.write("	margin: 10px auto;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#pagination a {\r\n");
      out.write("	display: inline-block;\r\n");
      out.write("	margin-right: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#pagination .on {\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	cursor: default;\r\n");
      out.write("	color: #777;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("	src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=3861f788e29343386d218451b11fd8a4&libraries=services\">\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1 class=\"title\">지역별 캠핑장 찾기</h1>\r\n");
      out.write("	<div class=\"map_wrap\" onsubmit=\"searchPlaces(); return false;\">\r\n");
      out.write("		<div id=\"map\"\r\n");
      out.write("			style=\"width: 100%; height: 100%; position: relative; overflow: hidden;\"></div>\r\n");
      out.write("\r\n");
      out.write("		<div id=\"menu_wrap\" class=\"bg_white\">\r\n");
      out.write("			<div class=\"option\">\r\n");
      out.write("				<div>\r\n");
      out.write("					<form>\r\n");
      out.write("						키워드 : <input type=\"text\" value=\"\" id=\"keyword\" size=\"15\"\r\n");
      out.write("							placeholder=\"지역 입력 ex) 대구\">\r\n");
      out.write("						<button type=\"submit\">검색하기</button>\r\n");
      out.write("					</form>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<hr>\r\n");
      out.write("			<ul id=\"placesList\"></ul>\r\n");
      out.write("			<div id=\"pagination\"></div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		// 마커를 담을 배열입니다\r\n");
      out.write("		var markers = [];\r\n");
      out.write("\r\n");
      out.write("		var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("		mapOption = {\r\n");
      out.write("			center : new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n");
      out.write("			level : 3\r\n");
      out.write("		// 지도의 확대 레벨\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		// 지도를 생성합니다    \r\n");
      out.write("		var map = new kakao.maps.Map(mapContainer, mapOption);\r\n");
      out.write("\r\n");
      out.write("		// 장소 검색 객체를 생성합니다\r\n");
      out.write("		var ps = new kakao.maps.services.Places();\r\n");
      out.write("\r\n");
      out.write("		// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\r\n");
      out.write("		var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("			zIndex : 1\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 키워드 검색을 요청하는 함수입니다\r\n");
      out.write("		function searchPlaces() {\r\n");
      out.write("\r\n");
      out.write("			var keyword = document.getElementById('keyword').value;\r\n");
      out.write("\r\n");
      out.write("			if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\r\n");
      out.write("				alert('키워드를 입력해주세요!');\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			// 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n");
      out.write("			ps.keywordSearch(keyword + '캠핑', placesSearchCB);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n");
      out.write("		function placesSearchCB(data, status, pagination) {\r\n");
      out.write("			if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("				// 정상적으로 검색이 완료됐으면\r\n");
      out.write("				// 검색 목록과 마커를 표출합니다\r\n");
      out.write("				displayPlaces(data);\r\n");
      out.write("\r\n");
      out.write("				// 페이지 번호를 표출합니다\r\n");
      out.write("				displayPagination(pagination);\r\n");
      out.write("\r\n");
      out.write("			} else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n");
      out.write("\r\n");
      out.write("				alert('검색 결과가 존재하지 않습니다.');\r\n");
      out.write("				return;\r\n");
      out.write("\r\n");
      out.write("			} else if (status === kakao.maps.services.Status.ERROR) {\r\n");
      out.write("\r\n");
      out.write("				alert('검색 결과 중 오류가 발생했습니다.');\r\n");
      out.write("				return;\r\n");
      out.write("\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 검색 결과 목록과 마커를 표출하는 함수입니다\r\n");
      out.write("		function displayPlaces(places) {\r\n");
      out.write("\r\n");
      out.write("			var listEl = document.getElementById('placesList'), menuEl = document\r\n");
      out.write("					.getElementById('menu_wrap'), fragment = document\r\n");
      out.write("					.createDocumentFragment(), bounds = new kakao.maps.LatLngBounds(), listStr = '';\r\n");
      out.write("\r\n");
      out.write("			// 검색 결과 목록에 추가된 항목들을 제거합니다\r\n");
      out.write("			removeAllChildNods(listEl);\r\n");
      out.write("\r\n");
      out.write("			// 지도에 표시되고 있는 마커를 제거합니다\r\n");
      out.write("			removeMarker();\r\n");
      out.write("\r\n");
      out.write("			for (var i = 0; i < places.length; i++) {\r\n");
      out.write("\r\n");
      out.write("				// 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("				var placePosition = new kakao.maps.LatLng(places[i].y,\r\n");
      out.write("						places[i].x), marker = addMarker(placePosition, i), itemEl = getListItem(\r\n");
      out.write("						i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n");
      out.write("\r\n");
      out.write("				// 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("				// LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("				bounds.extend(placePosition);\r\n");
      out.write("\r\n");
      out.write("				// 마커와 검색결과 항목에 mouseover 했을때\r\n");
      out.write("				// 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("				// mouseout 했을 때는 인포윈도우를 닫습니다\r\n");
      out.write("				(function(marker, title) {\r\n");
      out.write("					kakao.maps.event.addListener(marker, 'mouseover',\r\n");
      out.write("							function() {\r\n");
      out.write("								displayInfowindow(marker, title);\r\n");
      out.write("							});\r\n");
      out.write("\r\n");
      out.write("					kakao.maps.event.addListener(marker, 'mouseout',\r\n");
      out.write("							function() {\r\n");
      out.write("								infowindow.close();\r\n");
      out.write("							});\r\n");
      out.write("\r\n");
      out.write("					itemEl.onmouseover = function() {\r\n");
      out.write("						displayInfowindow(marker, title);\r\n");
      out.write("					};\r\n");
      out.write("\r\n");
      out.write("					itemEl.onmouseout = function() {\r\n");
      out.write("						infowindow.close();\r\n");
      out.write("					};\r\n");
      out.write("				})(marker, places[i].place_name);\r\n");
      out.write("\r\n");
      out.write("				fragment.appendChild(itemEl);\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			// 검색결과 항목들을 검색결과 목록 Element에 추가합니다\r\n");
      out.write("			listEl.appendChild(fragment);\r\n");
      out.write("			menuEl.scrollTop = 0;\r\n");
      out.write("\r\n");
      out.write("			// 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("			map.setBounds(bounds);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 검색결과 항목을 Element로 반환하는 함수입니다\r\n");
      out.write("		function getListItem(index, places) {\r\n");
      out.write("\r\n");
      out.write("			var el = document.createElement('li'), itemStr = '<span class=\"markerbg marker_'\r\n");
      out.write("					+ (index + 1)\r\n");
      out.write("					+ '\"></span>'\r\n");
      out.write("					+ '<div class=\"info\">'\r\n");
      out.write("					+ '   <h5>' + places.place_name + '</h5>';\r\n");
      out.write("\r\n");
      out.write("			if (places.road_address_name) {\r\n");
      out.write("				itemStr += '    <span>' + places.road_address_name + '</span>'\r\n");
      out.write("						+ '   <span class=\"jibun gray\">' + places.address_name\r\n");
      out.write("						+ '</span>';\r\n");
      out.write("			} else {\r\n");
      out.write("				itemStr += '    <span>' + places.address_name + '</span>';\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			itemStr += '  <span class=\"tel\">' + places.phone + '</span>'\r\n");
      out.write("					+ '</div>';\r\n");
      out.write("\r\n");
      out.write("			el.innerHTML = itemStr;\r\n");
      out.write("			el.className = 'item';\r\n");
      out.write("\r\n");
      out.write("			return el;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n");
      out.write("		function addMarker(position, idx, title) {\r\n");
      out.write("			var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n");
      out.write("			imageSize = new kakao.maps.Size(36, 37), // 마커 이미지의 크기\r\n");
      out.write("			imgOptions = {\r\n");
      out.write("				spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n");
      out.write("				spriteOrigin : new kakao.maps.Point(0, (idx * 46) + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("				offset : new kakao.maps.Point(13, 37)\r\n");
      out.write("			// 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n");
      out.write("			}, markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize,\r\n");
      out.write("					imgOptions), marker = new kakao.maps.Marker({\r\n");
      out.write("				position : position, // 마커의 위치\r\n");
      out.write("				image : markerImage\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("			marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n");
      out.write("			markers.push(marker); // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("\r\n");
      out.write("			return marker;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n");
      out.write("		function removeMarker() {\r\n");
      out.write("			for (var i = 0; i < markers.length; i++) {\r\n");
      out.write("				markers[i].setMap(null);\r\n");
      out.write("			}\r\n");
      out.write("			markers = [];\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n");
      out.write("		function displayPagination(pagination) {\r\n");
      out.write("			var paginationEl = document.getElementById('pagination'), fragment = document\r\n");
      out.write("					.createDocumentFragment(), i;\r\n");
      out.write("\r\n");
      out.write("			// 기존에 추가된 페이지번호를 삭제합니다\r\n");
      out.write("			while (paginationEl.hasChildNodes()) {\r\n");
      out.write("				paginationEl.removeChild(paginationEl.lastChild);\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			for (i = 1; i <= pagination.last; i++) {\r\n");
      out.write("				var el = document.createElement('a');\r\n");
      out.write("				el.href = \"#\";\r\n");
      out.write("				el.innerHTML = i;\r\n");
      out.write("\r\n");
      out.write("				if (i === pagination.current) {\r\n");
      out.write("					el.className = 'on';\r\n");
      out.write("				} else {\r\n");
      out.write("					el.onclick = (function(i) {\r\n");
      out.write("						return function() {\r\n");
      out.write("							pagination.gotoPage(i);\r\n");
      out.write("						}\r\n");
      out.write("					})(i);\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("				fragment.appendChild(el);\r\n");
      out.write("			}\r\n");
      out.write("			paginationEl.appendChild(fragment);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\r\n");
      out.write("		// 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("		function displayInfowindow(marker, title) {\r\n");
      out.write("			var content = '<div style=\"padding:5px;z-index:1;\">' + title\r\n");
      out.write("					+ '</div>';\r\n");
      out.write("\r\n");
      out.write("			infowindow.setContent(content);\r\n");
      out.write("			infowindow.open(map, marker);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n");
      out.write("		function removeAllChildNods(el) {\r\n");
      out.write("			while (el.hasChildNodes()) {\r\n");
      out.write("				el.removeChild(el.lastChild);\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
