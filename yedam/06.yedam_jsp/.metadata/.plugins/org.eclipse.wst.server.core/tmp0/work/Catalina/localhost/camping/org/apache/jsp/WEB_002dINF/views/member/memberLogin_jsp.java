/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-06-22 04:51:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memberLogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<!-- Google Fonts -->\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i|Playfair+Display:400,400i,500,500i,600,600i,700,700i&subset=cyrillic\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("header {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".loginBox {\r\n");
      out.write("	width: 30%;\r\n");
      out.write("	margin: 100px auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("form {\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-box {\r\n");
      out.write("	position: relative;\r\n");
      out.write("	margin: 10px 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-box>input {\r\n");
      out.write("	background: transparent;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-bottom: solid 1px #ccc;\r\n");
      out.write("	padding: 20px 0px 5px 0px;\r\n");
      out.write("	font-size: 14pt;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input::placeholder {\r\n");
      out.write("	color: transparent;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input:placeholder-shown+label {\r\n");
      out.write("	color: #aaa;\r\n");
      out.write("	font-size: 14pt;\r\n");
      out.write("	top: 15px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-box input:focus+label, .input-box label {\r\n");
      out.write("	color: #8aa1a1;\r\n");
      out.write("	font-size: 10pt;\r\n");
      out.write("	pointer-events: none;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	left: 0px;\r\n");
      out.write("	top: 0px;\r\n");
      out.write("	transition: all 0.2s ease;\r\n");
      out.write("	-webkit-transition: all 0.2s ease;\r\n");
      out.write("	-moz-transition: all 0.2s ease;\r\n");
      out.write("	-o-transition: all 0.2s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input:focus, input:not(:placeholder-shown) {\r\n");
      out.write("	border-bottom: solid 1px #8aa1a1;\r\n");
      out.write("	outline: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input:autofill, input:autofill:hover, input:autofill:focus, input:autofill:active\r\n");
      out.write("	{\r\n");
      out.write("	-webkit-text-fill-color: #000;\r\n");
      out.write("	-webkit-box-shadow: 0 0 0px 1000px #fff inset;\r\n");
      out.write("	box-shadow: 0 0 0px 1000px transparent inset;\r\n");
      out.write("	transition: background-color 5000s ease-in-out 0s;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=submit] {\r\n");
      out.write("	background-color: #8aa1a1;\r\n");
      out.write("	border: none;\r\n");
      out.write("	color: white;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	height: 35px;\r\n");
      out.write("	font-size: 14pt;\r\n");
      out.write("	margin-top: 60px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#forgot {\r\n");
      out.write("	text-align: right;\r\n");
      out.write("	font-size: 12pt;\r\n");
      out.write("	color: rgb(164, 164, 164);\r\n");
      out.write("	margin: 10px 0px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body[data-darkmode=on] .input-box>input {\r\n");
      out.write("	color: #F7F7F7;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<title>로그인 페이지</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"loginBox\">\r\n");
      out.write("		<header>\r\n");
      out.write("			<h2>Login</h2>\r\n");
      out.write("		</header>\r\n");
      out.write("		<form id=\"log_frm\" action=\"memberLogin.do\" method=\"post\">\r\n");
      out.write("\r\n");
      out.write("			<div class=\"input-box\">\r\n");
      out.write("				<input type=\"email\" id=\"memberId\" name=\"memberId\"\r\n");
      out.write("					required=\"required\" placeholder=\"아이디\"> <label\r\n");
      out.write("					for=\"memberId\">아이디</label>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<div class=\"input-box\">\r\n");
      out.write("				<input type=\"password\" id=\"memberPw\" name=\"memberPw\"\r\n");
      out.write("					required=\"required\" placeholder=\"비밀번호\"> <label\r\n");
      out.write("					for=\"memberPw\">비밀번호</label>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div id=\"forgot\" onclick=\"searchPw()\">비밀번호 찾기</div>\r\n");
      out.write("			<input type=\"submit\" value=\"로그인\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/js.cookie.js\"></script>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		function searchPw() {\r\n");
      out.write("			let name = prompt(\"이름을 입력해주세요.\", \"이름\");\r\n");
      out.write("			let memberId = prompt(\"아이디를 입력해주세요.\", \"아이디\");\r\n");
      out.write("			let url = \"searchPw.do?name=\" + name + \"&&memberId=\" + memberId;\r\n");
      out.write("			\r\n");
      out.write("			fetch(url)\r\n");
      out.write("			.then(response => response.json())\r\n");
      out.write("			.then(text => htmlProcess(text));\r\n");
      out.write("	} \r\n");
      out.write("	\r\n");
      out.write("  	function htmlProcess(data){\r\n");
      out.write("      if(data == 'none'){\r\n");
      out.write("        alert(\"해당하는 회원을 찾을 수 없습니다.\");\r\n");
      out.write("      }else{\r\n");
      out.write("        alert(data.memberId + \"님의 비밀번호는 \"+ data.memberPw +\"입니다.\");\r\n");
      out.write("      }\r\n");
      out.write("	}\r\n");
      out.write("    \r\n");
      out.write("		window.onload = function() {\r\n");
      out.write("			if (\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${login}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" == \"fail\") {\r\n");
      out.write("				alert(\"아이디 또는 패스워드가 틀렸습니다. \\n 다시 입력해주세요.\");\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
