package yhBank.transaction;

import java.util.ArrayList;
import java.util.List;

import yhBank.common.DAO;
import yhBank.member.Member;

public class TransactionDAO extends DAO{
	//싱 글 톤
	private static TransactionDAO taDAO = null;
	
	private TransactionDAO() {}
	
	public static TransactionDAO getInstance() {
		if(taDAO == null) {
			taDAO = new TransactionDAO();
		}
		return taDAO;
	}
	
	//거래장부 입금 거래 내역 추가
	public void deposit(String accountNumber, int amount) {
		try {
			conn();
			String sql = "INSERT INTO transaction VALUES(?,SYSDATE,?,'입금')";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, accountNumber);
			pstmt.setInt(2, amount);
			pstmt.execute();
		} catch(Exception e) {
			e.printStackTrace();
		}finally {
			disconn();
		}
	}
	
	//거래장부 출금 거래 내역 추가
	public void withdrawal(String accountNumber, int amount) {
		try {
			conn();
			String sql = "INSERT INTO transaction VALUES(?,SYSDATE,?,'출금')";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, accountNumber);
			pstmt.setInt(2, amount);
			pstmt.execute();
		} catch(Exception e) {
			e.printStackTrace();
		}finally {
			disconn();
		}
	}
	
	//거래장부 환전 거래 내역 추가
	public void exchange(String accountNumber, double amount) {
		try {
			conn();
			String sql = "INSERT INTO transaction VALUES(?,SYSDATE,?,'환전')";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, accountNumber);
			pstmt.setDouble(2, amount);
			pstmt.execute();
		} catch(Exception e) {
			e.printStackTrace();
		}finally {
			disconn();
		}
	}
	
	//거래장부 환전 거래 내역 추가
	public void interest(String accountNumber, double amount) {
		try {
			conn();
			String sql = "INSERT INTO transaction VALUES(?,SYSDATE,?,'이자')";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, accountNumber);
			pstmt.setDouble(2, amount);
			pstmt.execute();
		} catch(Exception e) {
			e.printStackTrace();
		}finally {
			disconn();
		}
	}
	
	//최근 한달 간 거래금액
	public List<Transaction> lastMonthVolum() {
		List<Transaction> list = new ArrayList<>();
		Transaction transaction = null;
		try {
			conn();
			String sql = "SELECT a.member_id, SUM(t.transaction_amount) volum, m.member_auth "
					   + "FROM account a LEFT JOIN transaction t ON (a.account_number = t.account_number) JOIN member m ON(a.member_id = m.member_id) "
					   + "WHERE t.transaction_date BETWEEN ADD_MONTHS(SYSDATE,-1)-1 AND SYSDATE-1 GROUP BY a.member_id, m.member_auth";
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				transaction = new Transaction();
				transaction.setMemberId(rs.getString("member_id"));
				transaction.setTransactionVolum(rs.getInt("volum"));
				transaction.setMemberAuth(rs.getString("member_auth"));
				list.add(transaction);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally {
			disconn();
		}
		return list;
	}
	
	//등급 갱신
	public int updateAuth(Transaction member, boolean upDown) {
		int result = 0;
		String sql = "";
		try {
			conn();
			if(upDown) {
				sql = "UPDATE member SET member_auth = 'V' WHERE member_id = ?";
			} else {
				sql = "UPDATE member SET member_auth = 'N' WHERE member_id = ?";
			}
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, member.getMemberId());
			
			result = pstmt.executeUpdate();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			disconn();
		}
		return result;
	}
	
	//계좌 해지 시 거래내역 삭제
	public void deleteTransaction(String accountNumber) {
	int result = 0;
		try {
			conn();
			
			String sql = "DELETE transaction WHERE account_number = ? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, accountNumber);
			pstmt.execute();
		}catch(Exception e) {
			e.printStackTrace();
		} finally {
			disconn();
		}
	}
}
